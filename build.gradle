plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"template" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

configurations {
	decompileTools
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	decompileTools 'org.benf:cfr:0.152'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

task decompileJar(type: JavaExec) {
	classpath = configurations.decompileTools
	mainClass = "org.benf.cfr.reader.Main"
	args = [
		".gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_5_1_21_5_build_1_v2/net/fabricmc/fabric-api/fabric-api-base-common/0.4.62+73a52b4b49/fabric-api-base-common-0.4.62+73a52b4b49.jar",
		"--outputdir", "decompiled-output"
	]
}

// すべてのJARファイルをデコンパイルするタスク
task decompileAllJars {
	doLast {
		def loomCacheDir = file(".gradle/loom-cache/remapped_mods")
		def outputDir = file("decompiled-output")
		
		if (!outputDir.exists()) {
			outputDir.mkdirs()
		}
		
		def jarFiles = []
		loomCacheDir.eachFileRecurse { file ->
			if (file.name.endsWith('.jar')) {
				jarFiles.add(file)
			}
		}
		
		jarFiles.each { jarFile ->
			println "デコンパイル中: ${jarFile.name}"
			
			// CFRデコンパイラを使用してJARをデコンパイル
			javaexec {
				classpath = configurations.decompileTools
				mainClass = "org.benf.cfr.reader.Main"
				args = [
					jarFile.absolutePath,
					"--outputdir", outputDir.absolutePath
				]
			}
		}
		
		println "すべてのJARファイルのデコンパイルが完了しました。"
	}
}

// 特定のディレクトリ内のすべてのJARファイルをデコンパイルするタスク
task decompileModJars {
	doLast {
		def modDir = file(".gradle/loom-cache/remapped_mods/net_fabricmc_yarn_1_21_5_1_21_5_build_1_v2/net/fabricmc/fabric-api")
		def outputDir = file("decompiled-output")
		
		if (!outputDir.exists()) {
			outputDir.mkdirs()
		}
		
		def jarFiles = []
		modDir.eachFileRecurse { file ->
			if (file.name.endsWith('.jar')) {
				jarFiles.add(file)
			}
		}
		
		jarFiles.each { jarFile ->
			println "デコンパイル中: ${jarFile.name}"
			
			// CFRデコンパイラを使用してJARをデコンパイル
			javaexec {
				classpath = configurations.decompileTools
				mainClass = "org.benf.cfr.reader.Main"
				args = [
					jarFile.absolutePath,
					"--outputdir", outputDir.absolutePath
				]
			}
		}
		
		println "すべてのFabric API JARファイルのデコンパイルが完了しました。"
	}
}